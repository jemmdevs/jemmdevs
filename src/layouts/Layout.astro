---
import ThemeToggle from '../components/common/ThemeToggle.astro';

interface Props {
	title: string;
	description?: string;
}

const { 
	title, 
	description = "Un blog simple con tema claro/oscuro"
} = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={description} />
		<title>{title}</title>
		
		<!-- Prevenir flash de tema incorrecto -->
		<script is:inline>
			// Función para configurar el tema inicial
			function setInitialTheme() {
				const storedTheme = localStorage.getItem('blog-theme-preference');
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				
				// Establecer tema basado en preferencia o valor predeterminado
				if (storedTheme === 'dark' || (!storedTheme && prefersDark)) {
					document.documentElement.classList.add('dark');
				} else {
					document.documentElement.classList.remove('dark');
				}
				
				// Agregar atributo para indicar que el tema está cargado
				document.documentElement.setAttribute('data-theme-loaded', 'true');
				console.log('Tema inicial establecido como:', document.documentElement.classList.contains('dark') ? 'oscuro' : 'claro');
			}
			
			// Ejecutar inmediatamente
			setInitialTheme();
		</script>
		
		<!-- EmailJS script -->
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
	</head>
	<body>
		<div class="min-h-screen flex flex-col bg-white text-black dark:bg-black dark:text-white">
			<main class="flex-grow">
				<slot />
			</main>
		</div>
		
		<!-- GitHub link fixed to the left side -->
		<a 
			href="https://github.com/jemmdevs" 
			target="_blank" 
			rel="noopener noreferrer"
			aria-label="Visit my GitHub"
			class="fixed left-6 top-1/2 transform -translate-y-1/2 z-50 flex items-center justify-center w-14 h-14 rounded-full bg-black dark:bg-white text-white dark:text-black shadow-lg hover:scale-110 hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300"
		>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
				<path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
			</svg>
		</a>
		
		<!-- Contact Me button -->
		<button 
			id="contact-button"
			aria-label="Contact Me"
			class="fixed right-6 bottom-6 z-50 flex items-center justify-center w-14 h-14 rounded-full bg-black dark:bg-white text-white dark:text-black shadow-lg hover:scale-110 hover:bg-gray-800 dark:hover:bg-gray-200 transition-all duration-300"
		>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
			</svg>
		</button>
		
		<!-- Notification toast (hidden by default) -->
		<div id="toast-notification" class="fixed right-6 bottom-24 z-50 transform translate-y-10 opacity-0 pointer-events-none transition-all duration-500 ease-out">
			<div class="flex items-center p-4 mb-4 rounded-lg shadow-lg bg-white dark:bg-gray-800 border-l-4 border-green-500">
				<div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500">
					<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
					</svg>
				</div>
				<div class="ml-3 text-sm font-normal text-gray-800 dark:text-gray-200">Message sent successfully!</div>
			</div>
		</div>
		
		<!-- Contact form modal (hidden by default) -->
		<div id="contact-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm hidden">
			<div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md mx-4 p-6 transform transition-all">
				<div class="flex justify-between items-center mb-4">
					<h2 class="text-2xl font-bold text-gray-900 dark:text-white">Contact Me</h2>
					<button id="close-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
						</svg>
					</button>
				</div>
				
				<form id="contact-form" class="space-y-4">
					<div>
						<label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Name</label>
						<input 
							type="text" 
							id="name" 
							name="name" 
							required 
							class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600"
						/>
					</div>
					
					<div>
						<label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
						<input 
							type="email" 
							id="email" 
							name="email" 
							required 
							class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600"
						/>
					</div>
					
					<div>
						<label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Message</label>
						<textarea 
							id="message" 
							name="message" 
							rows="4" 
							required 
							class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600"
						></textarea>
					</div>
					
					<div class="flex justify-end">
						<button 
							type="submit" 
							id="submit-form"
							class="px-4 py-2 bg-black dark:bg-white text-white dark:text-black rounded-md hover:bg-gray-800 dark:hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
						>
							Send Message
						</button>
					</div>
					
					<!-- Status messages (hidden, kept for fallback) -->
					<div id="success-message" class="hidden text-green-600 dark:text-green-400 text-sm font-medium">
						Message sent successfully! I'll get back to you soon.
					</div>
					<div id="error-message" class="hidden text-red-600 dark:text-red-400 text-sm font-medium">
						There was an error sending your message. Please try again.
					</div>
				</form>
			</div>
		</div>
	</body>
</html>

<style is:global>
	@import "../styles/global.css";
	
	/* Animación de aparecer gradualmente cuando el tema está cargado */
	html:not([data-theme-loaded]) body {
		opacity: 0;
	}
	
	html[data-theme-loaded] body {
		opacity: 1;
		transition: opacity 0.3s ease;
	}
	
	/* Modal animation */
	#contact-modal.show {
		animation: fadeIn 0.3s ease forwards;
	}
	
	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}

	/* Toast notification animation classes */
	#toast-notification.show {
		transform: translateY(0);
		opacity: 1;
		pointer-events: auto;
	}
	
	#toast-notification.hide {
		transform: translateY(10px);
		opacity: 0;
	}
</style>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		// EmailJS initialization
		if (typeof emailjs !== 'undefined') {
			// Inicialización con tu clave pública
			emailjs.init("waONZgvG5drpYE06F");
		}
		
		// Elementos del DOM
		const contactButton = document.getElementById('contact-button');
		const contactModal = document.getElementById('contact-modal');
		const closeModal = document.getElementById('close-modal');
		const contactForm = document.getElementById('contact-form');
		const successMessage = document.getElementById('success-message');
		const errorMessage = document.getElementById('error-message');
		const toastNotification = document.getElementById('toast-notification');
		
		// Abrir modal al hacer clic en el botón de contacto
		if (contactButton && contactModal) {
			contactButton.addEventListener('click', function() {
				contactModal.classList.remove('hidden');
				contactModal.classList.add('show');
			});
		}
		
		// Cerrar modal al hacer clic en el botón X
		if (closeModal && contactModal) {
			closeModal.addEventListener('click', function() {
				contactModal.classList.add('hidden');
				contactModal.classList.remove('show');
				// Reiniciar formulario y mensajes
				if (contactForm) {
					contactForm.reset();
				}
				if (successMessage) {
					successMessage.classList.add('hidden');
				}
				if (errorMessage) {
					errorMessage.classList.add('hidden');
				}
			});
		}
		
		// Cerrar modal al hacer clic fuera
		if (contactModal) {
			contactModal.addEventListener('click', function(e) {
				if (e.target === contactModal) {
					contactModal.classList.add('hidden');
					contactModal.classList.remove('show');
					// Reiniciar formulario y mensajes
					if (contactForm) {
						contactForm.reset();
					}
					if (successMessage) {
						successMessage.classList.add('hidden');
					}
					if (errorMessage) {
						errorMessage.classList.add('hidden');
					}
				}
			});
		}
		
		// Función para mostrar notificación
		function showToast() {
			if (toastNotification) {
				// Mostrar toast
				toastNotification.classList.add('show');
				
				// Ocultar después de 4 segundos
				setTimeout(function() {
					toastNotification.classList.add('hide');
					setTimeout(function() {
						toastNotification.classList.remove('show', 'hide');
					}, 500);
				}, 4000);
			}
		}
		
		// Manejar envío del formulario
		if (contactForm) {
			contactForm.addEventListener('submit', function(e) {
				e.preventDefault();
				
				// Ocultar mensajes anteriores
				if (successMessage) {
					successMessage.classList.add('hidden');
				}
				if (errorMessage) {
					errorMessage.classList.add('hidden');
				}
				
				// Obtener datos del formulario
				const nameInput = document.getElementById('name');
				const emailInput = document.getElementById('email');
				const messageInput = document.getElementById('message');
				
				// Verificar que emailjs está disponible
				if (typeof emailjs !== 'undefined' && nameInput && emailInput && messageInput) {
					// Envío de email con tus credenciales
					emailjs.send("service_j5q6azh", "template_gkt7fwu", {
						from_name: nameInput.value,
						reply_to: emailInput.value,
						message: messageInput.value
					})
					.then(function() {
						// Cerrar modal inmediatamente
						contactModal.classList.add('hidden');
						contactModal.classList.remove('show');
						
						// Reiniciar formulario
						if (contactForm) {
							contactForm.reset();
						}
						
						// Mostrar notificación toast
						showToast();
					})
					.catch(function(error) {
						console.error('EmailJS error:', error);
						if (errorMessage) {
							errorMessage.classList.remove('hidden');
						}
					});
				} else {
					console.log('Formulario procesado (EmailJS no está configurado)');
					
					// Simular envío exitoso para demostración
					// Cerrar modal inmediatamente
					contactModal.classList.add('hidden');
					contactModal.classList.remove('show');
					
					// Reiniciar formulario
					if (contactForm) {
						contactForm.reset();
					}
					
					// Mostrar notificación toast
					showToast();
				}
			});
		}
	});
</script>
