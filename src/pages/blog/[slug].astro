---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import ViewCounter from '../../components/blog/ViewCounter.astro';
import ViewIncrementer from '../../components/blog/ViewIncrementer.astro';
import ThemeToggle from '../../components/common/ThemeToggle.astro';

// Genera rutas para cada entrada de blog
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });
  
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Obtener datos del post
const { entry } = Astro.props;
const { Content } = await entry.render();

// Obtener todos los posts para navegación
const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const sortedPosts = allPosts.sort((a, b) => 
  b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Encontrar posts anterior y siguiente
const currentIndex = sortedPosts.findIndex(post => post.slug === entry.slug);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;

// Estimación de tiempo de lectura (cálculo simple)
const wordsPerMinute = 200;
const content = await entry.body;
const words = content.split(/\s+/).length;
const readingTime = Math.max(1, Math.ceil(words / wordsPerMinute));

// Formatear fecha
const formattedDate = new Date(entry.data.pubDate).toLocaleDateString('es-ES', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const updatedDate = entry.data.updatedDate 
  ? new Date(entry.data.updatedDate).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }) 
  : null;
---

<Layout title={entry.data.title} description={entry.data.description}>
  <!-- Botón de toggle de tema -->
  <ThemeToggle />
  
  <!-- Componente que incrementa el contador de vistas automáticamente -->
  <ViewIncrementer slug={entry.slug} />
  
  <main class="container mx-auto px-4 py-12 sm:px-6 max-w-3xl">
    <article>
      <!-- Navegación de regreso -->
      <a href="/" class="inline-flex items-center text-primary hover:text-secondary mb-8 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to blog
      </a>
      
      <!-- Título y metadatos -->
      <h1 class="text-4xl font-bold text-black dark:text-white mb-4">
        {entry.data.title}
      </h1>
      
      <div class="flex flex-wrap items-center text-sm text-gray-500 dark:text-gray-400 mb-6">
        <time datetime={entry.data.pubDate.toISOString()}>
          {formattedDate}
        </time>
        
        {updatedDate && (
          <span class="mx-2 inline-flex items-center">
            <span class="mx-2">•</span>
            Actualizado: {updatedDate}
          </span>
        )}
        
        <span class="mx-2">•</span>
        <ViewCounter slug={entry.slug} />
        
        <span class="mx-2">•</span>
        <span class="flex items-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
          {readingTime} min de lectura
        </span>
      </div>
      
      <!-- Etiquetas -->
      {entry.data.tags && entry.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-8">
          {entry.data.tags.map((tag) => (
            <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm">
              #{tag}
            </span>
          ))}
        </div>
      )}
      
      <!-- Descripción -->
      {entry.data.description && (
        <p class="text-xl text-gray-700 dark:text-gray-300 mb-8 font-medium">
          {entry.data.description}
        </p>
      )}
      
      <!-- Imagen destacada -->
      {entry.data.heroImage && (
        <div class="mb-8 rounded-lg overflow-hidden">
          <img 
            src={entry.data.heroImage} 
            alt={entry.data.title}
            class="w-full"
          />
        </div>
      )}
      
      <hr class="border-gray-200 dark:border-gray-800 mb-8">
      
      <!-- Contenido del post -->
      <div class="prose prose-lg max-w-none dark:prose-invert prose-img:rounded-lg prose-a:text-primary">
        <Content />
      </div>
      
      <!-- Navegación post anterior/siguiente -->
      <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-800 grid grid-cols-2 gap-4">
        {prevPost && (
          <a href={`/blog/${prevPost.slug}`} class="flex flex-col space-y-2 group">
            <span class="text-sm text-gray-500 dark:text-gray-400">Post anterior</span>
            <span class="text-primary group-hover:text-secondary transition-colors">
              ← {prevPost.data.title}
            </span>
          </a>
        )}
        
        {nextPost && (
          <a href={`/blog/${nextPost.slug}`} class="flex flex-col space-y-2 text-right group ml-auto">
            <span class="text-sm text-gray-500 dark:text-gray-400">Post siguiente</span>
            <span class="text-primary group-hover:text-secondary transition-colors">
              {nextPost.data.title} →
            </span>
          </a>
        )}
      </div>
    </article>
  </main>
</Layout> 