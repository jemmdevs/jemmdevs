---
interface Props {
  slug: string;
  showIcon?: boolean;
  className?: string;
}

const { 
  slug, 
  showIcon = true,
  className = "text-sm text-gray-500 dark:text-gray-400 flex items-center gap-1"
} = Astro.props;
---

<span class={className} data-view-counter data-slug={slug}>
  {showIcon && (
    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
    </svg>
  )}
  <span class="view-count">0</span> vistas
</span>

<script>
  // Constante para la clave de localStorage
  const VIEW_STORAGE_KEY = 'blog-post-views';
  
  // Funci칩n para obtener conteo de vistas
  function getViewCount(slug: string) {
    if (typeof localStorage === 'undefined') return 0;
    
    try {
      const viewData = localStorage.getItem(VIEW_STORAGE_KEY);
      if (!viewData) return 0;
      
      const counts = JSON.parse(viewData);
      return counts[slug] || 0;
    } catch (error) {
      console.error('Error al obtener conteo de vistas:', error);
      return 0;
    }
  }
  
  // Funci칩n para incrementar conteo de vistas
  function incrementViewCount(slug: string) {
    if (typeof localStorage === 'undefined') return 0;
    
    try {
      const viewData = localStorage.getItem(VIEW_STORAGE_KEY);
      const counts = viewData ? JSON.parse(viewData) : {};
      
      const newCount = (counts[slug] || 0) + 1;
      counts[slug] = newCount;
      
      localStorage.setItem(VIEW_STORAGE_KEY, JSON.stringify(counts));
      return newCount;
    } catch (error) {
      console.error('Error al incrementar conteo de vistas:', error);
      return 0;
    }
  }
  
  // Actualizar todos los contadores de vistas
  function updateViewCounters() {
    const counters = document.querySelectorAll('[data-view-counter]');
    
    counters.forEach(counter => {
      const slug = counter.getAttribute('data-slug');
      if (!slug) return;
      
      const countElement = counter.querySelector('.view-count');
      if (!countElement) return;
      
      countElement.textContent = getViewCount(slug).toString();
    });
  }
  
  // Inicializar contadores al cargar la p치gina
  document.addEventListener('DOMContentLoaded', () => {
    updateViewCounters();
  });
  
  // Para p치ginas que utilizan transiciones de Astro View
  document.addEventListener('astro:page-load', () => {
    updateViewCounters();
  });
</script> 